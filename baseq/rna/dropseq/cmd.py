import click, os, sys
from baseq.rna import cli
from baseq.fastq.sample_file import check_sample_files

@cli.command(short_help="inDrop/Drop-Seq/10X")
@click.option('--genome', help="human/mouse/mixed")
@click.option('--name', '-n', default='sample', help="sample name")
@click.option('--fq1', '-1', default='', help='fastq1 path')
@click.option('--fq2', '-2', default='', help='fastq2 path (optional)')
@click.option('--dir', '-d', default='./', help='Folder of output (./)')
def drops(name, fq1, fq2, genome, dir):
    print('Start Processing inDrop Results')
    samples = check_sample_files("", name, fq1, fq2)
    if samples == []:
        sys.exit("[error] No valid sample, Exit.")
    from baseq.rna.dropseq.barcode_counting import count_barcodes
    from baseq.rna.dropseq.barcode_stats import barcode_aggregate
    count_barcodes(fq1, "./barcode_count.csv", "10X", 20)
    barcode_aggregate(barcode_count="./barcode_count.csv")

@cli.command(short_help="Barcode Counting")
@click.option('--name', '-n', default='sample', help="sample name")
@click.option('--protocol', '-p', type=click.Choice(['10X', 'indrop', 'dropseq']))
@click.option('--fq1', '-1', default='', help='fastq1, reads with barcode/UMI')
@click.option('--dir', '-d', default='./', help='Folder of output (./)')
def drops_barcode_counting(name, protocol, fq1, dir):
    print('Start Processing inDrop Results')
    samples = check_sample_files("", name, fq1)
    if samples == []:
        sys.exit("[error] No valid sample, Exit.")
    from baseq.rna.dropseq.barcode_counting import count_barcodes
    outpath = os.path.join(dir, "barcode_count.{}.csv".format(name))
    count_barcodes(fq1, outpath, protocol, 20)

@cli.command(short_help="Barcode Stats")
@click.option('--name', '-n', default='sample', help="sample name")
@click.option('--protocol', '-p', type=click.Choice(['10X', 'indrop', 'dropseq']))
@click.option('--bcfile', '-b', default='', help='Barcode count file')
@click.option('--minreads', default=2000, help='Minimum reads for a barcode')
@click.option('--dir', '-d', default='./', help='Folder of output (./)')
def drops_barcode_stats(name, protocol, bcfile, minreads, dir):
    print('Start Processing inDrop Results')
    from baseq.rna.dropseq.barcode_stats import barcode_aggregate
    outpath = os.path.join(dir, "barcode_stats.{}.csv".format(name))
    barcode_aggregate(protocol = protocol, barcode_count=bcfile, min_reads=int(minreads), output=outpath)

@cli.command(short_help="Split Barcode")
@click.option('--name', '-n', default='sample', help="sample name")
@click.option('--protocol', '-p', type=click.Choice(['10X', 'indrop', 'dropseq']))
@click.option('--bcstats', '-b', help='Files generated by barcode stats step')
@click.option('--fq1', '-1', default='', help='fastq1, reads with barcode/UMI')
@click.option('--fq2', '-2', default='', help='fastq2')
@click.option('--minreads', default=2000, help='Minimum reads for a barcode')
@click.option('--maxcell', default=10000, help='Max cell number')
@click.option('--dir', '-d', default='./', help='Folder of output (./)')
def drops_barcode_splits(name, protocol, bcfile, minreads, dir):
    print('Start Processing inDrop Results')
